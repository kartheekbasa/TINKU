string datatype:
----------------
in python, the string datatype having 'str' class

we can create a string object in python,we are using either 
single quote's(' ') or double quote's (" ")

in python, the string object is a sequence object i.e., both input order and output order will be same.

in python, the string object is a iterable object i.e., we can apply the iterations.

in python, the string object is a immutable object i.e., we can't modify the data/content.

ex1:
----
>>> x='siva'
>>> x
'siva'
>>> type(x)
<class 'str'>

ex2:
----
>>> y="krishna"
>>> y
'krishna'
>>> type(y)
<class 'str'>

note:
----
str()		--> to convert any type of data into string
		--> by default return value is empty string i.e.,''

ex1:
----
>>> x=str()
>>> x
''

ex2:
-----
>>> a=5 #int
>>> b=2.3 #float
>>> c=2+3j #complex
>>> d=False #bool
>>> str(a)
'5'
>>> str(b)
'2.3'
>>> str(c)
'(2+3j)'
>>> str(d)
'False'

ex3:
----
>>> x='a'
>>> y='5'
>>> z='@'
>>> int(x)
ValueError: invalid literal for int() with base 10: 'a'
>>> int(y)
5
>>> int(z)
ValueError: invalid literal for int() with base 10: '@'

ex4:
----
>>> x='a'
>>> y='5'
>>> z='@'
>>> float(x)
ValueError: could not convert string to float: 'a'
>>> float(y)
5.0
>>> float(z)
ValueError: could not convert string to float: '@'

ex5:
----
>>> x='a'
>>> y='5'
>>> z='@'
>>> complex(x)
ValueError: complex() arg is a malformed string
>>> complex(y)
(5+0j)
>>> complex(z)
ValueError: complex() arg is a malformed string

ex6:
----
>>> x='a'
>>> y='5'
>>> z='@'
>>> a=''
>>> bool(x)
True
>>> bool(y)
True
>>> bool(z)
True
>>> bool(a)
False

list datatype:
---------------
in python, the list datatype having 'list' class.

we can create a list object by using [ ] or by calling list() or 		list(iterableobj)

in python, the list object is a sequence object.

in python, the list object is a iterable object.

in python, the list object is a mutable object i.e., we can modify the data.

ex:
---
>>> x=[5,3,8,7]
>>> x
[5, 3, 8, 7]
>>> type(x)
<class 'list'>

tuple datatype:
---------------
in python, the tuple datatype having 'tuple' class.

we can create a tuple object by using () or by calling tuple() or 		tuple(iterableobj)

in python, the tuple object is a sequence object,iterable object and immutable object.

ex:
---
>>> x=(5,3,7,2)
>>> x
(5, 3, 7, 2)
>>> type(x)
<class 'tuple'>

set datatype:
-------------
in python, the set datatype having 'set' class

we can create a set object by using { } or by calling set() or 			set(iterableobj)

in python, the set object is a non-sequence object i.e., we are not expected always same order as a output.

in python,the set object is a iterable object and mutable object.

ex1:
----
>>> x={5,3,9,7}
>>> x
{9, 3, 5, 7}
>>> type(x)
<class 'set'>

ex2:
----
>>> y={7,12,34,21}
>>> y
{34, 12, 21, 7}
>>> type(y)
<class 'set'>

ex3:
-----
>>> z={1,2,3,4}
>>> z
{1, 2, 3, 4}
>>> type(z)
<class 'set'>

frozenset datatype:
-------------------
in python, the frozenset datatype having "frozenset" class

we can create a frozenset object by using frozenset() or 		frozenset(iterableobj)

in python, the frozenset object is a non-sequence,iterable and immutable object.

ex1:
---
>>> x=frozenset("siva")
>>> x
frozenset({'s', 'a', 'v', 'i'})
>>> type(x)
<class 'frozenset'>

ex2:
----
>>> y=frozenset([1,2,3,4])
>>> y
frozenset({1, 2, 3, 4})
>>> type(y)
<class 'frozenset'>

ex3:
----
>>> z=frozenset((5,3,7,2))
>>> z
frozenset({2, 3, 5, 7})
>>> type(z)
<class 'frozenset'>

note:
-----
list()		--> to convert any type of iterable object into list object
		--> by default return value is empty list i.e., [ ]

ex1:
----
>>> x=list()
>>> x
[]

ex2:
----
>>> a="siva" #str
>>> b=[5,2,6,1] #list
>>> c=(5,2,9,3) #tuple
>>> d={6,3,9,14} #set
>>> e=frozenset("krishna") #frozenset
>>> list(a)
['s', 'i', 'v', 'a']
>>> list(b)
[5, 2, 6, 1]
>>> list(c)
[5, 2, 9, 3]
>>> list(d)
[9, 3, 6, 14]
>>> list(e)
['s', 'r', 'i', 'a', 'n', 'h', 'k']


tuple()		--> to convert any type of iterable object into tuple
		--> by default return value is empty tuple i.e., ()

ex1:
----
>>> x=tuple()
>>> x
()

ex2:
----
>>> a="siva" #str
>>> b=[5,2,6,1] #list
>>> c=(5,2,9,3) #tuple
>>> d={6,3,9,14} #set
>>> e=frozenset("krishna") #frozenset
>>> tuple(a)
('s', 'i', 'v', 'a')
>>> tuple(b)
(5, 2, 6, 1)
>>> tuple(c)
(5, 2, 9, 3)
>>> tuple(d)
(9, 3, 6, 14)
>>> tuple(e)
('s', 'r', 'i', 'a', 'n', 'h', 'k')

set()		--> to convert any type of iterable object into set object
		--> by default return value is empty set i.e., set()

ex1:
---
>>> x=set()
>>> x
set()

ex2:
----
>>> a="siva" #str
>>> b=[5,2,6,1] #list
>>> c=(5,2,9,3) #tuple
>>> d={6,3,9,14} #set
>>> e=frozenset("krishna") #frozenset
>>> set(a)
{'s', 'a', 'v', 'i'}
>>> set(b)
{1, 2, 5, 6}
>>> set(c)
{9, 2, 3, 5}
>>> set(d)
{9, 3, 6, 14}
>>> set(e)
{'s', 'r', 'h', 'i', 'a', 'k', 'n'}

frozenset()	--> to convert any type of iterable object into frozenset
		--> by default return value is empty frozenset i.e., 		    frozenset()

ex1:
----
>>> x=frozenset()
>>> x
frozenset()

ex2:
----
>>> a="siva" #str
>>> b=[5,2,6,1] #list
>>> c=(5,2,9,3) #tuple
>>> d={6,3,9,14} #set
>>> e=frozenset("krishna") #frozenset
>>> frozenset(a)
frozenset({'s', 'a', 'v', 'i'})
>>> frozenset(b)
frozenset({1, 2, 5, 6})
>>> frozenset(c)
frozenset({9, 2, 3, 5})
>>> frozenset(d)
frozenset({9, 3, 6, 14})
>>> frozenset(e)
frozenset({'s', 'r', 'i', 'a', 'n', 'h', 'k'})







