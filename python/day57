mixing of both non-default and default arguments:
--------------------------------------------------
ex:
---
def add(x,y=2):
    z=x+y
    print(z)
add(4,5)
add(4)

output:
------
9
6

mixing of both default and non-default arguments:
--------------------------------------------------
ex:
---
def add(x=2,y):
    z=x+y
    print(z)
add(4,5)


syntax error: parameter without default value follows parameter with default value

note:
-----
the non-default arguments never dont follow the default arguments.

non-keyword arguments:
----------------------
	the programmer or developer dont assign the any parameter to the arguments at the time of function calling, that type of arguments are called non-keyword arguments.

ex:
---
def msg(x,y):
    print(x,"siva",y)
msg("hai","good morning")
msg("good morning","hai")

output:
-------
hai siva good morning
good morning siva hai

keyword arguments:
------------------
	the programmer or developer to assign the parameter to the arguments at the time of function calling, that type of arguments are called keyword arguments.

ex:
---
def msg(x,y):
    print(x,"siva",y)
msg(x="hai",y="good morning")
msg(y="good morning",x="hai")

output:
-------
hai siva good morning
hai siva good morning

note:
----
the non-keyword arguments are also called positional arguments.


mixing of both non-keyword and keyword arguments:
-------------------------------------------------
ex:
---
def msg(x,y):
    print(x,"siva",y)
msg("hai",y="good morning")

output:
-------
hai siva good morning

mixing of both keyword and non-keyword arguments:
-------------------------------------------------
ex:
---
def msg(x,y):
    print(x,"siva",y)
msg(x="hai","good morning")

SyntaxError: positional(non-keyword) argument follow the keyword argument

note:
-----
the positional(non-keyword) arguments never dont follow the keyword arguments


the normal argument takes exactly one value at a time.

ex1:
----
def f1(x):
    print(x)
f1()

TypeError: f1() missing 1 required positional argument: 'x'

ex2:
----
def f1(x):
    print(x)
f1(3,5)

TypeError: f1() takes 1 positional argument but 2 were given

ex3:
----
def f1(x):
    print(x)
f1(3)

output:
------
3


the normal argument type is depends on the value of that argument.

ex:
---
def f1(x):
    print(x,type(x))
f1(3)
f1(2.3)
f1(2+3j)
f1(False)
f1("siva")
f1([5,3,7,2])
f1((4,9,2,8))
f1({5,3,8,9})
f1(frozenset("siva"))
f1({'m':56,'sc':89,'so':31})

output:
-------
3 <class 'int'>
2.3 <class 'float'>
(2+3j) <class 'complex'>
False <class 'bool'>
siva <class 'str'>
[5, 3, 7, 2] <class 'list'>
(4, 9, 2, 8) <class 'tuple'>
{8, 9, 3, 5} <class 'set'>
frozenset({'s', 'i', 'a', 'v'}) <class 'frozenset'>
{'m': 56, 'sc': 89, 'so': 31} <class 'dict'>


Arbitrary arguments:
--------------------
in python, the arbitrary arguments takes 0 or More values.

by default, the arbitrary argument type is tuple.

	syntax
	-----
	def functionname(*parameter):
		--------
		--------
		--------

ex1:
----
def f1(*x):
    print(x,type(x))
f1()

output:
-------
() <class 'tuple'>

ex2:
----
def f1(*x):
    print(x,type(x))
f1(4)

output:
-------
(4,) <class 'tuple'>

ex3:
----
def f1(*x):
    print(x,type(x))
f1(4,6,9)

output:
-------
(4, 6, 9) <class 'tuple'>

ex4:
---
def f1(*x):
    print(x,type(x))
f1(4,6.3,9j,False,"siva",[6,7])

output:
------
(4, 6.3, 9j, False, 'siva', [6, 7]) <class 'tuple'>


mixing of normal and arbitrary arguments:
-----------------------------------------
ex1:
----
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1()

output:
-------
TypeError: f1() missing 1 required positional argument: 'x'

ex2:
---
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(5)

output:
------
5 <class 'int'>
() <class 'tuple'>

ex3:
----
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(2.3,4j,False,9)

output:
-------
2.3 <class 'float'>
(4j, False, 9) <class 'tuple'>

mixing of both arbitrary and normal arguments:
----------------------------------------------
ex1:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1()

output:
------
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex2:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(6)

output:
-------
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex3:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(6,2.3,4j,False)

output:
-------
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex4:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(6,2.3,4j,y=False)

output:
------
(6, 2.3, 4j) <class 'tuple'>
False <class 'bool'>




